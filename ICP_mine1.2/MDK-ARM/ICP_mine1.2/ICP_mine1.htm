<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ICP_mine1.2\ICP_mine1.2]</title></head>
<body><HR>
<H1>Static Call Graph for image ICP_mine1.2\ICP_mine1.2</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Mar 13 18:57:00 2018
<BR><P>
<H3>Maximum Stack Usage =        832 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
StartAppTask &rArr; test_netWorkTask &rArr; rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC_IRQHandler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[14f]">MaskSPIInterrupts</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">Hcd_UnmaskSPIInterrupts</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[71]">Atheros_Driver_Task</a> from cust_driver_main.o(i.Atheros_Driver_Task) referenced from cust_driver_main.o(i.Custom_Driver_CreateThread)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5f]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">CDC_Control_FS</a> from usbd_cdc_if.o(i.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[8]">CDC_DeInit_FS</a> from usbd_cdc_if.o(i.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[7]">CDC_Init_FS</a> from usbd_cdc_if.o(i.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[a]">CDC_Receive_FS</a> from usbd_cdc_if.o(i.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[72]">Custom_FreeRxRequest</a> from cust_driver_main.o(i.Custom_FreeRxRequest) referenced from cust_driver_main.o(i.Custom_GetRxRequest)
 <LI><a href="#[2a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[73]">Driver_RxComplete</a> from driver_txrx.o(i.Driver_RxComplete) referenced from driver_main.o(i.Driver_RxReady)
 <LI><a href="#[74]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequest)
 <LI><a href="#[74]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7c]">RAK_TcpClient_EventHandle1</a> from my_task.o(i.RAK_TcpClient_EventHandle1) referenced from my_task.o(i.creat_tcpcTask1)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[78]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[78]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[77]">SD_DMAReceiveCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[76]">SD_DMARxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[79]">SD_DMATransmitCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[75]">SD_DMATxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[90]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[94]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[92]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[91]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[93]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8d]">StartAppTask</a> from my_task.o(i.StartAppTask) referenced from freertos.o(.constdata)
 <LI><a href="#[8c]">StartDefaultTask</a> from my_task.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[8f]">StartInquireTask</a> from my_task.o(i.StartInquireTask) referenced from freertos.o(.constdata)
 <LI><a href="#[8e]">StartTest_Task</a> from my_task.o(i.StartTest_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">USART1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[10]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[c]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[e]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[14]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[12]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[11]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[13]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[b]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[d]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[80]">_deinit_interface</a> from rw_lib_platform_os.o(i._deinit_interface) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[85]">_ext_interrupt</a> from rw_lib_platform_os.o(i._ext_interrupt) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[7f]">_init_interface</a> from rw_lib_platform_os.o(i._init_interface) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[81]">_power_up_down</a> from rw_lib_platform_os.o(i._power_up_down) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[82]">_spi_io_buffer</a> from rw_lib_platform_os.o(i._spi_io_buffer) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[7b]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[89]">connect_callback</a> from rw_lib_platform_os.o(i.connect_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[88]">customer_assert</a> from rw_lib_platform_os.o(i.customer_assert) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[83]">delay_ms</a> from rw_lib_platform_os.o(i.delay_ms) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[7a]">fputc</a> from bsp.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[84]">get_stamp</a> from rw_lib_platform_os.o(i.get_stamp) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[6d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7e]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[7d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[87]">pvPortMalloc</a> from heap_4.o(i.pvPortMalloc) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[70]">query_credit_deficit</a> from api_txrx.o(i.query_credit_deficit) referenced from api_txrx.o(i.Api_TxGetStatus)
 <LI><a href="#[8a]">scan_callback</a> from rw_lib_platform_os.o(i.scan_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[86]">vPortFree</a> from heap_4.o(i.vPortFree) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[8b]">wps_easy_callback</a> from rw_lib_platform_os.o(i.wps_easy_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[351]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[95]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[352]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[353]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[354]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[355]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[356]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34b]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[34a]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32d]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[246]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[245]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[357]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[35a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[135]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[136]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[2b5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[123]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[105]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[134]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[35d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>AD7606_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad7606.o(i.AD7606_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD7606_Init &rArr; AD7606_SetOsRate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_queue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetOsRate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>AD7606_Read4CH</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ad7606.o(i.AD7606_Read4CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD7606_Read4CH &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[a0]"></a>AD7606_SetOsRate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ad7606.o(i.AD7606_SetOsRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7606_SetOsRate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
</UL>

<P><STRONG><a name="[a7]"></a>AD7606_handle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ad7606.o(i.AD7606_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD7606_handle &rArr; AD7606_Read4CH &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[ac]"></a>AD_CONVEST_PWM_Init</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ad7606.o(i.AD_CONVEST_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AD_CONVEST_PWM_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Api_AggrRecvAddbaReqEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvAddbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>

<P><STRONG><a name="[b4]"></a>Api_AggrRecvDelbaReqEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvDelbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
</UL>

<P><STRONG><a name="[b6]"></a>Api_BssInfoEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
</UL>

<P><STRONG><a name="[b8]"></a>Api_ConnectEvent</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_ConnectEvent &rArr; Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
</UL>

<P><STRONG><a name="[bd]"></a>Api_ConnectWiFi</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, api_ioctl.o(i.Api_ConnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_static_wep_keys
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[c4]"></a>Api_DataTxStart</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_txrx.o(i.Api_DataTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_AC2EndpointID
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[cb]"></a>Api_DeInitFinish</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api_init.o(i.Api_DeInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[129]"></a>Api_DeInitStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_init.o(i.Api_DeInitStart))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[ce]"></a>Api_DisconnectEvent</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
</UL>

<P><STRONG><a name="[d1]"></a>Api_DisconnectWiFi</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, api_ioctl.o(i.Api_DisconnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Api_DisconnectWiFi &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[c6]"></a>Api_DriverAccessCheck</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, api_ioctl.o(i.Api_DriverAccessCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[d3]"></a>Api_GetPmkEvent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_GetPmkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
</UL>

<P><STRONG><a name="[d6]"></a>Api_InitFinish</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_init.o(i.Api_InitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_InitFinish &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[d7]"></a>Api_InitStart</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_init.o(i.Api_InitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_InitStart &rArr; socket_context_init &rArr; custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[da]"></a>Api_ParseInfoElem</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, api_ioctl.o(i.Api_ParseInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>

<P><STRONG><a name="[dd]"></a>Api_RSNASuccessEvent</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
</UL>

<P><STRONG><a name="[df]"></a>Api_ReadyEvent</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, api_wmi_rx.o(i.Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
</UL>

<P><STRONG><a name="[348]"></a>Api_RegDomainEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_wmi_rx.o(i.Api_RegDomainEvent))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
</UL>

<P><STRONG><a name="[e1]"></a>Api_RxComplete</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, api_txrx.o(i.Api_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[e9]"></a>Api_ScanCompleteEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_ScanCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
</UL>

<P><STRONG><a name="[eb]"></a>Api_SockResponseEventRx</STRONG> (Thumb, 762 bytes, Stack size 56 bytes, api_stack_offload.o(i.Api_SockResponseEventRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_SockResponseEventRx &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[ef]"></a>Api_TargetStatsEvent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_TargetStatsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
</UL>

<P><STRONG><a name="[f0]"></a>Api_TkipMicErrorEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_TkipMicErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
</UL>

<P><STRONG><a name="[f1]"></a>Api_TxComplete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[f3]"></a>Api_TxGetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_TxGetStatus &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[f5]"></a>Api_WMIInitFinish</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, api_init.o(i.Api_WMIInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_WMIInitFinish &rArr; send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[f9]"></a>Api_WmiTxStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, api_txrx.o(i.Api_WmiTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[fb]"></a>Api_WpsProfileEvent</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, api_wmi_rx.o(i.Api_WpsProfileEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
</UL>

<P><STRONG><a name="[fd]"></a>Api_bind</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
</UL>

<P><STRONG><a name="[101]"></a>Api_connect</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
</UL>

<P><STRONG><a name="[102]"></a>Api_easyconfigEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
</UL>

<P><STRONG><a name="[104]"></a>Api_ipconfig</STRONG> (Thumb, 326 bytes, Stack size 192 bytes, api_stack_offload.o(i.Api_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>

<P><STRONG><a name="[106]"></a>Api_ipconfig_dhcp_pool</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
</UL>

<P><STRONG><a name="[107]"></a>Api_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>

<P><STRONG><a name="[108]"></a>Api_shutdown</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, api_stack_offload.o(i.Api_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
</UL>

<P><STRONG><a name="[10a]"></a>Api_socket</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, api_stack_offload.o(i.Api_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>

<P><STRONG><a name="[10e]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[110]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[112]"></a>BSP_SD_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[115]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[117]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>Bus_InOutDescriptorSet</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutDescriptorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>

<P><STRONG><a name="[150]"></a>Bus_InOutToken</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[b7]"></a>Custom_Api_BssInfoEvent</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cust_api_wmi_rx.o(i.Custom_Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>

<P><STRONG><a name="[bc]"></a>Custom_Api_ConnectEvent</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, cust_api_wmi_rx.o(i.Custom_Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[cf]"></a>Custom_Api_DisconnectEvent</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_Api_DisconnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[de]"></a>Custom_Api_RSNASuccessEvent</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>

<P><STRONG><a name="[e0]"></a>Custom_Api_ReadyEvent</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cust_api_wmi_rx.o(i.Custom_Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>

<P><STRONG><a name="[127]"></a>Custom_Api_Shutdown</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cust_api_init.o(i.Custom_Api_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Custom_Api_Shutdown &rArr; Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
</UL>

<P><STRONG><a name="[12e]"></a>Custom_Api_Start</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cust_api_init.o(i.Custom_Api_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[103]"></a>Custom_Api_easyconfigEvent</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>

<P><STRONG><a name="[e7]"></a>Custom_DeliverFrameToNetworkStack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cust_api_stack_txrx.o(i.Custom_DeliverFrameToNetworkStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Custom_DeliverFrameToNetworkStack &rArr; custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[138]"></a>Custom_Driver_ContextDeInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>

<P><STRONG><a name="[13c]"></a>Custom_Driver_ContextInit</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_set_rx_pool
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>

<P><STRONG><a name="[133]"></a>Custom_Driver_CreateThread</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cust_driver_main.o(i.Custom_Driver_CreateThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Custom_Driver_CreateThread &rArr; rw_creat_task &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[12a]"></a>Custom_Driver_DestroyThread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_DestroyThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Custom_Driver_DestroyThread &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[142]"></a>Custom_Driver_Interrupt_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_Interrupt_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
</UL>

<P><STRONG><a name="[c5]"></a>Custom_Driver_WaitForCondition</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_WaitForCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[f4]"></a>Custom_Driver_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>

<P><STRONG><a name="[d5]"></a>Custom_Driver_WakeUser</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[13a]"></a>Custom_GetRxRequest</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_GetRxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_GetRxRequest &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_tailroom
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[5a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>DRIVER_INT_HANDLE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_isr.o(i.DRIVER_INT_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>Driver_BootComm</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, driver_init.o(i.Driver_BootComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[159]"></a>Driver_CompleteRequest</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, driver_main.o(i.Driver_CompleteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[cc]"></a>Driver_ContextDeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[d8]"></a>Driver_ContextInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[10d]"></a>Driver_DeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, driver_init.o(i.Driver_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Driver_DeInit &rArr; wmi_shutdown &rArr; rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_deinit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[162]"></a>Driver_DropTxDataPackets</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, driver_main.o(i.Driver_DropTxDataPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Driver_DropTxDataPackets &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[168]"></a>Driver_GetTargetInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_init.o(i.Driver_GetTargetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[132]"></a>Driver_Init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, driver_init.o(i.Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_GetTargetInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[10c]"></a>Driver_Main</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, driver_main.o(i.Driver_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[156]"></a>Driver_ReadDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_ReadDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_ReadDataDiag &rArr; Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[175]"></a>Driver_ReadRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_ReadRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>

<P><STRONG><a name="[172]"></a>Driver_RecvPacket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Driver_RecvPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[146]"></a>Driver_ReportRxBuffStatus</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, driver_main.o(i.Driver_ReportRxBuffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[73]"></a>Driver_RxComplete</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Driver_RxComplete &rArr; Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_main.o(i.Driver_RxReady)
</UL>
<P><STRONG><a name="[171]"></a>Driver_RxReady</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, driver_main.o(i.Driver_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Driver_RxReady &rArr; Custom_GetRxRequest &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[174]"></a>Driver_SendPacket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Driver_SendPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[ca]"></a>Driver_SubmitTxRequest</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SubmitTxRequest &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[fa]"></a>Driver_SubmitTxRequestNoBlock</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequestNoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>

<P><STRONG><a name="[173]"></a>Driver_TxReady</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, driver_main.o(i.Driver_TxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[157]"></a>Driver_WriteDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_WriteDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[18a]"></a>Driver_WriteRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_WriteRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
</UL>

<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>EnQueue</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, my_queue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[18d]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[18e]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[14c]"></a>GetDriverContextByInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextByInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>

<P><STRONG><a name="[128]"></a>GetDriverContextPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[24e]"></a>GetQueue_length</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_queue.o(i.GetQueue_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetQueue_length
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[18f]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_ADC_Init</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>HAL_DMA_Init</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_DMA_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[197]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_DMA_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[199]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>

<P><STRONG><a name="[19a]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[19b]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_GPIO_Init</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetOsRate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[194]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[221]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[19d]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[284]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[285]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[283]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1196 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_PCD_Init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_OscConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[114]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[263]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 474 bytes, Stack size 20 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[111]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_SD_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_SD_InitCard</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_SD_MspInit</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, sdio.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[202]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_interface
</UL>

<P><STRONG><a name="[a4]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[204]"></a>HAL_SPI_Init</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[203]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[205]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[208]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[209]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[216]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[20a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[20c]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 1234 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_PWM_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[21d]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[214]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[220]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[215]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>HAL_UART_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
</UL>

<P><STRONG><a name="[223]"></a>HAL_UART_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[121]"></a>HTC_ConnectService</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, htc.o(i.HTC_ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[170]"></a>HTC_ProcessCpuInterrupt</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, htc.o(i.HTC_ProcessCpuInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTC_ProcessCpuInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[16d]"></a>HTC_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, htc.o(i.HTC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HTC_Start &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[16b]"></a>HTC_WaitTarget</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, htc.o(i.HTC_WaitTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HTC_WaitTarget &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[15e]"></a>HW_DeInit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hw_api.o(i.HW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[18c]"></a>HW_EnableDisableSPIIRQ</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hw_api.o(i.HW_EnableDisableSPIIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
</UL>

<P><STRONG><a name="[166]"></a>HW_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_api.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[14d]"></a>HW_InterruptHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_api.o(i.HW_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>

<P><STRONG><a name="[d0]"></a>HW_MsecDelay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hw_api.o(i.HW_MsecDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_MsecDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[15d]"></a>HW_PowerUpDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hw_api.o(i.HW_PowerUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_PowerUpDown &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>Hcd_ClearCPUInterrupt</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, spi_hcd.o(i.Hcd_ClearCPUInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Hcd_ClearCPUInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[15c]"></a>Hcd_Deinitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_hcd.o(i.Hcd_Deinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[178]"></a>Hcd_DoPioExternalAccess</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioExternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[17f]"></a>Hcd_DoPioInternalAccess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioInternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_DoPioInternalAccess &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[180]"></a>Hcd_GetLookAhead</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_GetLookAhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_GetLookAhead &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[17a]"></a>Hcd_GetMboxAddress</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_GetMboxAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hcd_GetMboxAddress &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[167]"></a>Hcd_Init</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Hcd_Init &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[189]"></a>Hcd_ProgramWriteBufferWaterMark</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spi_hcd.o(i.Hcd_ProgramWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hcd_ProgramWriteBufferWaterMark &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[188]"></a>Hcd_RefreshWriteBufferSpace</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_RefreshWriteBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hcd_RefreshWriteBufferSpace &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[17b]"></a>Hcd_Request</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[16e]"></a>Hcd_SpiInterrupt</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_SpiInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Hcd_SpiInterrupt &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[153]"></a>Hcd_UnmaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_UnmaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[187]"></a>Htc_GetCreditCounterUpdate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, htc.o(i.Htc_GetCreditCounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[179]"></a>Htc_PrepareRecvPacket</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, htc.o(i.Htc_PrepareRecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Htc_PrepareRecvPacket &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[17d]"></a>Htc_ProcessRecvHeader</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, htc.o(i.Htc_ProcessRecvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Htc_ProcessRecvHeader &rArr; Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[185]"></a>Htc_ProcessTxComplete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, htc.o(i.Htc_ProcessTxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessTxComplete &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[228]"></a>Htc_ReadCreditCounter</STRONG> (Thumb, 80 bytes, Stack size 104 bytes, htc.o(i.Htc_ReadCreditCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
</UL>

<P><STRONG><a name="[17e]"></a>Htc_RxComplete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, htc.o(i.Htc_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Htc_RxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[181]"></a>Htc_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, htc.o(i.Htc_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_SendPacket &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
</UL>

<P><STRONG><a name="[a1]"></a>Init_queue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_queue.o(i.Init_queue))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
</UL>

<P><STRONG><a name="[a9]"></a>LED_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_Toggle &rArr; HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[22e]"></a>MX_ADC1_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22f]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[231]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>MX_GPIO_Init</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e1]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdio.o(i.MX_SDIO_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>MX_SPI3_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
</UL>

<P><STRONG><a name="[237]"></a>MX_TIM2_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[238]"></a>MX_TIM3_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_ConfigClockSource &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[239]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23a]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[240]"></a>PowerOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PowerOff &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[241]"></a>PowerOn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PowerOn &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[242]"></a>RAK_TcpClient</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tcp_udp.o(i.RAK_TcpClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = RAK_TcpClient &rArr; connect &rArr; t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[7c]"></a>RAK_TcpClient_EventHandle1</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, my_task.o(i.RAK_TcpClient_EventHandle1))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = RAK_TcpClient_EventHandle1 &rArr; send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQueue_n
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_length
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_task.o(i.creat_tcpcTask1)
</UL>
<P><STRONG><a name="[24f]"></a>ReadQueue_n</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, my_queue.o(i.ReadQueue_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadQueue_n
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[1fb]"></a>SDIO_ConfigData</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_ConfigData &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[262]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1ec]"></a>SDIO_GetResponse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[50]"></a>SDIO_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDIO_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>SDIO_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1f8]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1f3]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[251]"></a>SDIO_SendCommand</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[1f2]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[252]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[254]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1fc]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[256]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[257]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[258]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1fd]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1fe]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[259]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[25a]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[25c]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[25d]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1eb]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[25e]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1ee]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[200]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[201]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[90]"></a>SD_initialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>SD_ioctl</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>SD_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>SD_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>StartAppTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_task.o(i.StartAppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = StartAppTask &rArr; test_netWorkTask &rArr; rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>StartDefaultTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_task.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = StartDefaultTask &rArr; get_xtask_state &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>StartInquireTask</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, my_task.o(i.StartInquireTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = StartInquireTask &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>StartTest_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, my_task.o(i.StartTest_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartTest_Task &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26d]"></a>SystemClock_Config</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[21f]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[21a]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
</UL>

<P><STRONG><a name="[23d]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[11c]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
</UL>

<P><STRONG><a name="[11b]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[277]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
</UL>

<P><STRONG><a name="[28d]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[279]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[27a]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[27b]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[275]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[27d]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[276]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[27e]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[27f]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[23b]"></a>USBD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[282]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[270]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[1af]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[26f]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[281]"></a>USBD_LL_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[28f]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[1d2]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[272]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[274]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[1db]"></a>USBD_LL_Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1dc]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[1da]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[286]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e0]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[27c]"></a>USBD_LL_StallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[28b]"></a>USBD_LL_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[1e4]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[278]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>

<P><STRONG><a name="[287]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[23c]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[28e]"></a>USBD_SetClassConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[23e]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[288]"></a>USBD_StdDevReq</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[28a]"></a>USBD_StdEPReq</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[289]"></a>USBD_StdItfReq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b5]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[1c9]"></a>USB_ActivateSetup</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>USB_CoreInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1b1]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[1e2]"></a>USB_DevConnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1d9]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1d8]"></a>USB_DevInit</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1d5]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1b8]"></a>USB_EP0StartXfer</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[1bb]"></a>USB_EP0_OutStart</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[1b3]"></a>USB_EPClearStall</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[1ba]"></a>USB_EPSetStall</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[1b7]"></a>USB_EPStartXfer</STRONG> (Thumb, 534 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[1e3]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[291]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[1c8]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>

<P><STRONG><a name="[1ca]"></a>USB_GetDevSpeed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>USB_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>USB_SetCurrentMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1df]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[23f]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26b]"></a>UsbReceiveData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.UsbReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UsbReceiveData &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[a8]"></a>UsbSendData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.UsbSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UsbSendData &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[c9]"></a>Util_AC2EndpointID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util.o(i.Util_AC2EndpointID))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[db]"></a>Util_Freq2ieee</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, util.o(i.Util_Freq2ieee))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[186]"></a>Util_GetEndpoint</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i.Util_GetEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[2c0]"></a>Util_Ieee2freq</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, util.o(i.Util_Ieee2freq))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[292]"></a>WIFI_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bsp.o(i.WIFI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WIFI_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[293]"></a>WIFI_SPI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.WIFI_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WIFI_SPI_Init &rArr; MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[ae]"></a>_Error_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Error_Handler &rArr; HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[294]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[360]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[24b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[296]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[361]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[2de]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[362]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[363]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[364]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2ad]"></a>_ascii_to_hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib.o(i._ascii_to_hex))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
</UL>

<P><STRONG><a name="[15a]"></a>a_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[15b]"></a>a_malloc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[12f]"></a>a_malloc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_malloc_init))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2ae]"></a>a_netbuf_alloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>

<P><STRONG><a name="[13e]"></a>a_netbuf_alloc_raw</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[176]"></a>a_netbuf_configure</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cust_driver_netbuf.o(i.a_netbuf_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_netbuf_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[139]"></a>a_netbuf_dequeue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[140]"></a>a_netbuf_enqueue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>

<P><STRONG><a name="[e8]"></a>a_netbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_tx_pool
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>

<P><STRONG><a name="[2af]"></a>a_netbuf_free_rx_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_free_rx_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[2b0]"></a>a_netbuf_free_tx_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_free_tx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[11a]"></a>a_netbuf_get_fragment</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_get_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_get_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>

<P><STRONG><a name="[2d4]"></a>a_netbuf_headroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_headroom))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[148]"></a>a_netbuf_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[22d]"></a>a_netbuf_pull</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[109]"></a>a_netbuf_purge_queue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_purge_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = a_netbuf_purge_queue &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>

<P><STRONG><a name="[182]"></a>a_netbuf_push</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>

<P><STRONG><a name="[229]"></a>a_netbuf_put</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
</UL>

<P><STRONG><a name="[2b1]"></a>a_netbuf_put_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a_netbuf_put_data &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[13d]"></a>a_netbuf_queue_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[2b2]"></a>a_netbuf_reinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>

<P><STRONG><a name="[13f]"></a>a_netbuf_set_rx_pool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_set_rx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[149]"></a>a_netbuf_tailroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_tailroom))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[e3]"></a>a_netbuf_to_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>

<P><STRONG><a name="[e4]"></a>a_netbuf_to_len</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_to_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[22b]"></a>a_netbuf_trim</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_trim &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[160]"></a>aggr_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcv_aggr.o(i.aggr_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[16a]"></a>aggr_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcv_aggr.o(i.aggr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_init &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[b3]"></a>aggr_recv_addba_req_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rcv_aggr.o(i.aggr_recv_addba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>

<P><STRONG><a name="[b5]"></a>aggr_recv_delba_req_evt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_recv_delba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>

<P><STRONG><a name="[bb]"></a>aggr_reset_state</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[a6]"></a>assert_failed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[e6]"></a>assert_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rw_lib.o(i.assert_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>

<P><STRONG><a name="[298]"></a>ath_ioctl_handler</STRONG> (Thumb, 2106 bytes, Stack size 248 bytes, cust_api_ioctl.o(i.ath_ioctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_power_mode_cmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Ieee2freq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
</UL>

<P><STRONG><a name="[247]"></a>bind</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bind &rArr; t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[100]"></a>blockForResponse</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cust_api_stack_offload.o(i.blockForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = blockForResponse &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_exit_critical
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[ed]"></a>clear_socket_context</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, api_stack_offload.o(i.clear_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_socket_context &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
</UL>

<P><STRONG><a name="[244]"></a>close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[2cc]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_utilities.o(i.configureTimerForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = configureTimerForRunTimeStats &rArr; HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[248]"></a>connect</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = connect &rArr; t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[2cf]"></a>creat_tcpcTask1</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, my_task.o(i.creat_tcpcTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = creat_tcpcTask1 &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[2d1]"></a>custom_header_alloc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = custom_header_alloc &rArr; a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[2d2]"></a>custom_header_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_header_free &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[2a6]"></a>custom_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
</UL>

<P><STRONG><a name="[137]"></a>custom_receive_tcpip</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cust_api_stack_txrx.o(i.custom_receive_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>

<P><STRONG><a name="[2d3]"></a>custom_send_tcpip</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, cust_api_stack_txrx.o(i.custom_send_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_headroom
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[2d5]"></a>custom_socket_context_deinit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = custom_socket_context_deinit &rArr; rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
</UL>

<P><STRONG><a name="[2d6]"></a>custom_socket_context_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
</UL>

<P><STRONG><a name="[13b]"></a>default_native_free_fn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.default_native_free_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = default_native_free_fn &rArr; txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[83]"></a>delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[2d9]"></a>eTaskGetState</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[ec]"></a>find_socket_context</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, api_stack_offload.o(i.find_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[7a]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[271]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[32a]"></a>getRunTimeCounterValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_utilities.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[84]"></a>get_stamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.get_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_stamp &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[269]"></a>get_xtask_state</STRONG> (Thumb, 252 bytes, Stack size 192 bytes, task_utilities.o(i.get_xtask_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = get_xtask_state &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[fe]"></a>isSocketBlocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.isSocketBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>

<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[273]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[26a]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTest_Task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[264]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[2e2]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[267]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[265]"></a>osMessageCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[266]"></a>osMessageGet</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1ff]"></a>osMessagePut</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[232]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
</UL>

<P><STRONG><a name="[2ef]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
</UL>

<P><STRONG><a name="[24c]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[2df]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
</UL>

<P><STRONG><a name="[2f2]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
</UL>

<P><STRONG><a name="[2f3]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
</UL>

<P><STRONG><a name="[2f4]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>

<P><STRONG><a name="[2f5]"></a>osSemaphoreWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>

<P><STRONG><a name="[26c]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[233]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
</UL>

<P><STRONG><a name="[2f8]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
</UL>

<P><STRONG><a name="[2fb]"></a>platform_init</STRONG> (Thumb, 256 bytes, Stack size 136 bytes, my_task.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = platform_init &rArr; rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_params
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[87]"></a>pvPortMalloc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[34e]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[30f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[319]"></a>rw_appdemo_context_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ap_sta.o(i.rw_appdemo_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_appdemo_context_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[165]"></a>rw_creat_mutex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rw_os.o(i.rw_creat_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rw_creat_mutex &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[131]"></a>rw_creat_sem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rw_os.o(i.rw_creat_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[141]"></a>rw_creat_task</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rw_os.o(i.rw_creat_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rw_creat_task &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
</UL>

<P><STRONG><a name="[161]"></a>rw_del_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[12c]"></a>rw_del_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[12b]"></a>rw_del_task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rw_del_task &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[2c6]"></a>rw_enter_critical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_os.o(i.rw_enter_critical))
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>

<P><STRONG><a name="[2c7]"></a>rw_exit_critical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_os.o(i.rw_exit_critical))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>

<P><STRONG><a name="[2fe]"></a>rw_getLibVersion</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rw_lib.o(i.rw_getLibVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rw_getLibVersion &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[2ff]"></a>rw_getMacAddr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i.rw_getMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rw_getMacAddr &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[31a]"></a>rw_ipConfig</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, rw_lib.o(i.rw_ipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = rw_ipConfig &rArr; t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[145]"></a>rw_lock_mutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rw_os.o(i.rw_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>

<P><STRONG><a name="[31d]"></a>rw_network_init</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, ap_sta.o(i.rw_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[31f]"></a>rw_network_startSTA</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ap_sta.o(i.rw_network_startSTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[10b]"></a>rw_pend_sem</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rw_os.o(i.rw_pend_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[143]"></a>rw_post_drv_sem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rw_os.o(i.rw_post_drv_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rw_post_drv_sem &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
</UL>

<P><STRONG><a name="[144]"></a>rw_post_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_post_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>

<P><STRONG><a name="[2fd]"></a>rw_sysDriverInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[320]"></a>rw_sysDriverReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rw_sysDriverReset &rArr; Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[24d]"></a>rw_sysSleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.rw_sysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[147]"></a>rw_unlock_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>

<P><STRONG><a name="[31e]"></a>rw_wlanConnect</STRONG> (Thumb, 724 bytes, Stack size 64 bytes, rw_lib.o(i.rw_wlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[321]"></a>rw_wlanGetScanInfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rw_lib.o(i.rw_wlanGetScanInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rw_wlanGetScanInfo &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[250]"></a>send</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rw_lib.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[f8]"></a>send_stack_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, api_stack_offload.o(i.send_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[2cb]"></a>shutdown</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rw_lib.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[243]"></a>socket</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rw_lib.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = socket &rArr; t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[cd]"></a>socket_context_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = socket_context_deinit &rArr; custom_socket_context_deinit &rArr; rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[d9]"></a>socket_context_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = socket_context_init &rArr; custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[2c5]"></a>t_bind</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[2cd]"></a>t_connect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[31b]"></a>t_ipconfig</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.t_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[31c]"></a>t_ipconfig_dhcp_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = t_ipconfig_dhcp_pool &rArr; Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[326]"></a>t_send</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[329]"></a>t_sendto</STRONG> (Thumb, 498 bytes, Stack size 192 bytes, cust_api_stack_offload.o(i.t_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
</UL>

<P><STRONG><a name="[327]"></a>t_shutdown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.t_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[328]"></a>t_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[268]"></a>test_netWorkTask</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, my_task.o(i.test_netWorkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = test_netWorkTask &rArr; rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppTask
</UL>

<P><STRONG><a name="[f2]"></a>txpkt_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.txpkt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
</UL>

<P><STRONG><a name="[ee]"></a>unblock</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.unblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[301]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[2dc]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[2dd]"></a>uxTaskGetSystemState</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[318]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, task_utilities.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[32b]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, task_utilities.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[305]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[30e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[303]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[302]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[2da]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_enter_critical
</UL>

<P><STRONG><a name="[2db]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_exit_critical
</UL>

<P><STRONG><a name="[86]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[349]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[32c]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[2f0]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[32e]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[2e3]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2f9]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[312]"></a>vTaskGetInfo</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[315]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[331]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[332]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[34f]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2e5]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[307]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[97]"></a>vTaskSwitchContext</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2fc]"></a>wifi_init_params</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.wifi_init_params))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[f7]"></a>wmi_allow_aggr_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_allow_aggr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_allow_aggr_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[c3]"></a>wmi_ap_profile_commit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_profile_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_ap_profile_commit &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[2c2]"></a>wmi_ap_set_param</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_ap_set_param &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[ea]"></a>wmi_bssfilter_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssfilter_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>

<P><STRONG><a name="[335]"></a>wmi_cmd_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wmi.o(i.wmi_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>

<P><STRONG><a name="[c0]"></a>wmi_connect_cmd</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[e2]"></a>wmi_control_rx</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, wmi.o(i.wmi_control_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[c7]"></a>wmi_data_hdr_add</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wmi.o(i.wmi_data_hdr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[e5]"></a>wmi_data_hdr_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wmi.o(i.wmi_data_hdr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wmi_data_hdr_remove &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[d2]"></a>wmi_disconnect_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wmi.o(i.wmi_disconnect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>

<P><STRONG><a name="[2ba]"></a>wmi_get_pmk_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_get_pmk_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2c1]"></a>wmi_get_power_mode_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wmi.o(i.wmi_get_power_mode_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2b8]"></a>wmi_get_stats_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_stats_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_get_stats_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[c8]"></a>wmi_implicit_create_pstream</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wmi.o(i.wmi_implicit_create_pstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wmi_implicit_create_pstream &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[169]"></a>wmi_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wmi.o(i.wmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wmi_init &rArr; rw_creat_mutex &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[2b4]"></a>wmi_listeninterval_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_listeninterval_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_listeninterval_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[344]"></a>wmi_meta_add</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, wmi.o(i.wmi_meta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
</UL>

<P><STRONG><a name="[2b3]"></a>wmi_pmparams_cmd</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, wmi.o(i.wmi_pmparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_pmparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[fc]"></a>wmi_powermode_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_powermode_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_powermode_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>

<P><STRONG><a name="[2be]"></a>wmi_probedSsid_cmd</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wmi.o(i.wmi_probedSsid_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_probedSsid_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2c3]"></a>wmi_promiscuous_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_promiscuous_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_promiscuous_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[347]"></a>wmi_qos_state_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wmi.o(i.wmi_qos_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wmi_qos_state_init &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[bf]"></a>wmi_scanparams_cmd</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, wmi.o(i.wmi_scanparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2b6]"></a>wmi_set_channelParams_cmd</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wmi.o(i.wmi_set_channelParams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wmi_set_channelParams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2bc]"></a>wmi_set_channel_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_channel_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_channel_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[122]"></a>wmi_set_control_ep</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wmi.o(i.wmi_set_control_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wmi_set_control_ep &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[2b7]"></a>wmi_set_ht_cap_cmd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_ht_cap_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_ht_cap_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2bd]"></a>wmi_set_passphrase_cmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_passphrase_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_passphrase_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2b9]"></a>wmi_set_pmk_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_pmk_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[15f]"></a>wmi_shutdown</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wmi_shutdown &rArr; rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[ff]"></a>wmi_socket_cmd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wmi.o(i.wmi_socket_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>

<P><STRONG><a name="[2bf]"></a>wmi_startscan_cmd</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, wmi.o(i.wmi_startscan_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_startscan_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[f6]"></a>wmi_storerecall_configure_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_storerecall_configure_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_storerecall_configure_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[2bb]"></a>wmi_wps_start_cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_start_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_wps_start_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2e0]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[333]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2f6]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[2ee]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[2e9]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[2eb]"></a>xQueueGenericReceive</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[34d]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2ed]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[2ec]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[2f1]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>

<P><STRONG><a name="[2ea]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[350]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2d0]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
</UL>

<P><STRONG><a name="[2e4]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[2e8]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[2e7]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[34c]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[30c]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[314]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[308]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[30a]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[30b]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[310]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[313]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2e6]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[2f7]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[316]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[317]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[300]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[304]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[306]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[309]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[7e]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[30d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[311]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[32f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[330]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[9]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>CDC_Init_FS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CDC_Receive_FS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[260]"></a>SD_CheckStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[ab]"></a>ADC_Init</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[196]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[195]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[198]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[20d]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[210]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[219]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[21b]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC3_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[21c]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC4_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[20e]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[20f]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[224]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[207]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[206]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[1a7]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1c5]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[78]"></a>SD_DMAError</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[77]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[76]"></a>SD_DMARxAbort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[79]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[75]"></a>SD_DMATxAbort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[261]"></a>SD_FindSCR</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[1fa]"></a>SD_InitCard</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1f9]"></a>SD_PowerON</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdOperCond &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1e9]"></a>SD_WideBus_Disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1e8]"></a>SD_WideBus_Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[253]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[25b]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[255]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[25f]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[80]"></a>_deinit_interface</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._deinit_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _deinit_interface &rArr; HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[85]"></a>_ext_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i._ext_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[7f]"></a>_init_interface</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._init_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _init_interface &rArr; WIFI_SPI_Init &rArr; MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[81]"></a>_power_up_down</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._power_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _power_up_down &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[82]"></a>_spi_io_buffer</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, rw_lib_platform_os.o(i._spi_io_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _spi_io_buffer &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[2c8]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[89]"></a>connect_callback</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, rw_lib_platform_os.o(i.connect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = connect_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[88]"></a>customer_assert</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.customer_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = customer_assert &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[2ce]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[8a]"></a>scan_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rw_lib_platform_os.o(i.scan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scan_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[8b]"></a>wps_easy_callback</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, rw_lib_platform_os.o(i.wps_easy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wps_easy_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[2c9]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ap_sta.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[2fa]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ap_sta.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[280]"></a>USBD_GetDescriptor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[28c]"></a>USBD_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CDC_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_Setup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[24a]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, my_task.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[249]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_task.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[2ca]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_utilities.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[297]"></a>_ath_commit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rw_lib.o(i._ath_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_commit &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[299]"></a>_ath_set_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_bssid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29a]"></a>_ath_set_cipher</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_cipher &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29b]"></a>_ath_set_essid</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29c]"></a>_ath_set_mode</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_mode &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29d]"></a>_ath_set_passphrase</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_passphrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_passphrase &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29e]"></a>_ath_set_pmk</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[29f]"></a>_ath_set_sec_type</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_sec_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_sec_type &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[2c4]"></a>_check_fd_invaild</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rw_lib.o(i._check_fd_invaild))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[2a0]"></a>_check_sys_params</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rw_lib.o(i._check_sys_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _check_sys_params &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[2a1]"></a>_clean_filename</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rw_lib.o(i._clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>

<P><STRONG><a name="[2a4]"></a>_set_PowerParam</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rw_lib.o(i._set_PowerParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[2a5]"></a>_set_TcpBackoffRetry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rw_lib.o(i._set_TcpBackoffRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _set_TcpBackoffRetry &rArr; custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[2a7]"></a>_set_ap_params</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rw_lib.o(i._set_ap_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
</UL>

<P><STRONG><a name="[2a8]"></a>_set_channel</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rw_lib.o(i._set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _set_channel &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[2a9]"></a>_set_ctycode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rw_lib.o(i._set_ctycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = _set_ctycode &rArr; _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[2aa]"></a>_set_power</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _set_power &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[2ab]"></a>_set_scan</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rw_lib.o(i._set_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _set_scan &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[2ac]"></a>_set_str_pmk</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, rw_lib.o(i._set_str_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ascii_to_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[12d]"></a>ClearDriverContextPtr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cust_api_init.o(i.ClearDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[130]"></a>SetDriverContextPtr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_api_init.o(i.SetDriverContextPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDriverContextPtr &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2d7]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[2d8]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[be]"></a>Install_static_wep_keys</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_ioctl.o(i.Install_static_wep_keys))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[324]"></a>rsn_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.rsn_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[322]"></a>rsn_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.rsn_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsn_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[dc]"></a>security_ie_parse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, api_ioctl.o(i.security_ie_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_parse
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_parse
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_cipher_parse
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_auth_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
</UL>

<P><STRONG><a name="[325]"></a>wpa_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.wpa_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[323]"></a>wpa_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.wpa_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[70]"></a>query_credit_deficit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_txrx.o(i.query_credit_deficit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = query_credit_deficit &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_txrx.o(i.Api_TxGetStatus)
</UL>
<P><STRONG><a name="[177]"></a>Driver_SetAddressWindowRegister</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, driver_diag.o(i.Driver_SetAddressWindowRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>

<P><STRONG><a name="[120]"></a>ConnectService</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, driver_init.o(i.ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[158]"></a>Driver_TargReset</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, driver_init.o(i.Driver_TargReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
</UL>

<P><STRONG><a name="[16c]"></a>SetupServices</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, driver_init.o(i.SetupServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetupServices &rArr; ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[17c]"></a>Driver_PostProcessRequest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver_txrx.o(i.Driver_PostProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[74]"></a>Driver_TxComplete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_txrx.o(i.Driver_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Driver_TxComplete &rArr; Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver_txrx.o(i.Driver_SubmitTxRequest)
<LI> driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
</UL>
<P><STRONG><a name="[183]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
</UL>

<P><STRONG><a name="[184]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
</UL>

<P><STRONG><a name="[334]"></a>wmi_addba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_addba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_addba_req_event_rx &rArr; Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[336]"></a>wmi_bssInfo_event_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssInfo_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wmi_bssInfo_event_rx &rArr; Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[337]"></a>wmi_connect_event_rx</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_connect_event_rx &rArr; Api_ConnectEvent &rArr; Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[341]"></a>wmi_delba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_delba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wmi_delba_req_event_rx &rArr; Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[346]"></a>wmi_determine_userPriority</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wmi.o(i.wmi_determine_userPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>

<P><STRONG><a name="[339]"></a>wmi_disconnect_event_rx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wmi.o(i.wmi_disconnect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[343]"></a>wmi_easyconfig_event_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_easyconfig_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wmi_easyconfig_event_rx &rArr; Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[33d]"></a>wmi_errorEvent_rx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wmi.o(i.wmi_errorEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wmi_errorEvent_rx &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[33f]"></a>wmi_get_pmk_event_rx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_get_pmk_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_get_pmk_event_rx &rArr; Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[338]"></a>wmi_ready_event_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wmi.o(i.wmi_ready_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wmi_ready_event_rx &rArr; Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[33b]"></a>wmi_regDomain_event_rx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wmi.o(i.wmi_regDomain_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_regDomain_event_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RegDomainEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[33a]"></a>wmi_rsna_4way_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_rsna_4way_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wmi_rsna_4way_rx &rArr; Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[33c]"></a>wmi_scanComplete_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wmi.o(i.wmi_scanComplete_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wmi_scanComplete_rx &rArr; Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[345]"></a>wmi_simple_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wmi.o(i.wmi_simple_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
</UL>

<P><STRONG><a name="[33e]"></a>wmi_statsEvent_rx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wmi.o(i.wmi_statsEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_statsEvent_rx &rArr; Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[342]"></a>wmi_tkip_micerr_event_rx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wmi.o(i.wmi_tkip_micerr_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = wmi_tkip_micerr_event_rx &rArr; Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[340]"></a>wmi_wps_profile_event_rx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_profile_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wmi_wps_profile_event_rx &rArr; Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[71]"></a>Atheros_Driver_Task</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cust_driver_main.o(i.Atheros_Driver_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Atheros_Driver_Task &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_Driver_CreateThread)
</UL>
<P><STRONG><a name="[72]"></a>Custom_FreeRxRequest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_main.o(i.Custom_FreeRxRequest))
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_GetRxRequest)
</UL>
<P><STRONG><a name="[b9]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[ba]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[163]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_main.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[164]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_main.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[11e]"></a>ConfigureByteSwap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_hcd.o(i.ConfigureByteSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigureByteSwap &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[14e]"></a>DoDMAOp</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, spi_hcd.o(i.DoDMAOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[154]"></a>DoPioReadInternal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioReadInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[11f]"></a>DoPioWriteInternal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioWriteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[152]"></a>EnableDisableSPIIRQHwDetect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spi_hcd.o(i.EnableDisableSPIIRQHwDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[226]"></a>HandleExternalReadDone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.HandleExternalReadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[151]"></a>Hcd_TransferData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[14f]"></a>MaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.MaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[227]"></a>ResetWriteBufferWaterMark</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_hcd.o(i.ResetWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
</UL>

<P><STRONG><a name="[225]"></a>Htc_DistributeCredits</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, htc.o(i.Htc_DistributeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[22a]"></a>Htc_ProcessCreditRpt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, htc.o(i.Htc_ProcessCreditRpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
</UL>

<P><STRONG><a name="[22c]"></a>Htc_ProcessTrailer</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, htc.o(i.Htc_ProcessTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[125]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[126]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[124]"></a>fill_scan_info</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, cust_api_wmi_rx.o(i.fill_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[295]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[2a3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
